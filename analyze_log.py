# Generated by Claude 3.5 Sonnet with a couple prompts:
"""
I have a log file comparison.log full of lines like this:

Got harmful count 0 for autodan_transform out of 4, so is_harmful was False. Input: some specific task

Write a Python program to parse the log file and show is_harmful rates, average scores, attempt counts, and other summary stats, broken up by task, by transform type, and by task x transform type. Also have it output some graphs.
"""

"""
Let's make it so that the keys for all our tasks are just the last three space-separated words in the task name so that things fit better. Let's also sort everything by overall success rate.
"""

"""
Something went wrong in this version. is_harmful rate went to success rate and is now sometimes 1.0000, which is too high. Some of the task names are blank in the summary at the end. Also, I want the summary to show all task x transform results, not just some of them.
"""

import re
from collections import defaultdict
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def parse_log_file(file_path):
    pattern = r"Got harmful count (\d+) for (\w+) out of (\d+), so is_harmful was (\w+)\. Input: (.+)"
    data = []

    with open(file_path, 'r') as file:
        for line in file:
            match = re.match(pattern, line)
            if match:
                harmful_count, transform_type, total_count, is_harmful, task = match.groups()
                # Use the last three space-separated words as the task key, ensure it's not empty
                task_words = task.strip().split()
                task_key = ' '.join(task_words[-3:]) if len(task_words) >= 3 else task.strip()
                data.append({
                    'harmful_count': int(harmful_count),
                    'transform_type': transform_type,
                    'total_count': int(total_count),
                    'is_harmful': is_harmful == 'True',
                    'task': task_key
                })

    return pd.DataFrame(data)

def calculate_summary_stats(df):
    summary = defaultdict(lambda: defaultdict(dict))

    groups = ['task', 'transform_type', ['task', 'transform_type']]
    
    for group in groups:
        grouped = df.groupby(group)
        
        group_name = '_'.join(group) if isinstance(group, list) else group
        
        summary[group_name]['is_harmful_rate'] = grouped['is_harmful'].mean()
        summary[group_name]['average_score'] = grouped.apply(lambda x: x['harmful_count'].mean() / x['total_count'].mean())
        summary[group_name]['attempt_count'] = grouped.size()

    # Sort all summaries by is_harmful_rate
    for group_name in summary:
        summary[group_name] = {k: v.sort_values() for k, v in summary[group_name].items()}

    return summary

def plot_graphs(df, summary):
    # Is Harmful Rate by Transform Type
    plt.figure(figsize=(10, 6))
    is_harmful_rate = summary['transform_type']['is_harmful_rate']
    sns.barplot(x=is_harmful_rate.index, y=is_harmful_rate.values)
    plt.title('Is Harmful Rate by Transform Type')
    plt.xlabel('Transform Type')
    plt.ylabel('Is Harmful Rate')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig('is_harmful_rate_by_transform.png')
    plt.close()

    # Average Score by Task
    plt.figure(figsize=(12, 6))
    avg_score = summary['task']['average_score']
    sns.barplot(x=avg_score.index, y=avg_score.values)
    plt.title('Average Score by Task')
    plt.xlabel('Task')
    plt.ylabel('Average Score')
    plt.xticks(rotation=90)
    plt.tight_layout()
    plt.savefig('average_score_by_task.png')
    plt.close()

    # Attempt Count by Task and Transform Type
    pivot_table = df.pivot_table(values='total_count', index='task', columns='transform_type', aggfunc='count', fill_value=0)
    pivot_table = pivot_table.sort_values(by=pivot_table.columns[0], ascending=True)  # Sort by the first column
    plt.figure(figsize=(12, 8))
    sns.heatmap(pivot_table, annot=True, fmt='d', cmap='YlOrRd')
    plt.title('Attempt Count by Task and Transform Type')
    plt.tight_layout()
    plt.savefig('attempt_count_heatmap.png')
    plt.close()

def main():
    df = parse_log_file('comparison.log')
    summary = calculate_summary_stats(df)

    # Print summary statistics
    for group, stats in summary.items():
        print(f"\nSummary for {group}:")
        for stat_name, stat_values in stats.items():
            print(f"\n{stat_name}:")
            print(stat_values)

    # Generate graphs
    plot_graphs(df, summary)

if __name__ == "__main__":
    main()
